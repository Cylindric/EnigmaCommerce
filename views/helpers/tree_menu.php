<?php

/**
 * Enigma : Online Sales Management. (http://www.enigmagen.org)
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 * 
 * @package core
 */

/**
 * Generates tree representations of MPTT or recursively nested data
 * @package core
 * @subpackage helpers
 */
class TreeMenuHelper extends AppHelper {

    var $name = 'TreeMenu';
    var $helpers = array('Html', 'Js');
    var $__settings = array();

    /**
     * Generate a nested tree-list
     * Takes the data passed in as $data, in the form as generated by
     * the Tree behaviour "generatetreelist" and outputs an HTML structure
     * of nested unordered lists.
     *
     * The following $settings are required:
     * model - which model in the $data to use
     *
     * The following $settings are optional:
     * title - name of the field to use to display
     * link - wether the list items should be links
     * controller - if a link, the controller to link to
     * action - if a link, the action to link to
     * ajaxtarget - if set, the link is a js ajax link and this is the id to update
     * div - the id for the outermost containing div
     * additional - an array of additional items to add to the end of the menu
     *
     * @access public
     * @param array $data
     * @param array $settings
     * @return string
     */
    function generate($data, $settings = null) {
        if (is_null($settings)) {
            $settings = array();
        }
        $this->__settings = array_merge(array(
            'model' => null,
            'title' => 'name',
            'depth' => 0,
            'link' => true,
            'div' => 'tree',
            'controller' => null,
            'action' => null,
            'ajaxtarget' => null,
            'additional' => null,
                ), (array) $settings);
        extract($this->__settings);

        $html = "\n";
        $html .= $this->__generate($data, $settings);

        // inject the additional items before the end of the list
        if (is_array($additional)) {
            $html = substr($html, 0, strrpos($html, '</ul>'));
            foreach ($additional as $item) {
                $html .= "<li>$item</li>\n";
            }
            $html .= "</ul>\n";
        }

        $js = '';
        $js .= '$(function() {';
        $js .= '$("#tree").treeview({';
        $js .= 'collapsed: true,';
        $js .= 'animated: "medium",';
        $js .= 'control:"#sidetreecontrol",';
        $js .= 'persist: "location"';
        $js .= '});';
        $js .= '})';
        $this->Html->scriptBlock($js, array('inline' => false));

        return $html;
    }

    /**
     * Generate the actual tree
     *
     * @access private
     * @param array $data
     * @return string
     */
    private function __generate($data) {
        extract($this->__settings);
        $html = '';

        $id = '';
        if ($depth == 0) {
            $id = ' id="' . $div . '"';
        }

        $whitespace = str_repeat("\t", $depth);

        $html .= "<ul" . $id . ">\n";
        foreach ($data as $item) {
            $html .= "<li>";
            if ($link) {

                if ($ajaxtarget == null) {
                    $html .= $this->Html->link(
                                    $item[$model][$title], array(
                                'controller' => $controller,
                                'action' => $action,
                                $item[$model]['id']
                            ));
                } else {
                    $html .= $this->Js->link(
                                    $item[$model][$title], array(
                                'controller' => $controller,
                                'action' => $action,
                                $item[$model]['id']
                                    ), array(
                                'update' => '#' . $ajaxtarget,
                                'before' => $this->Js->get('#' . $ajaxtarget)->effect('fadeOut'),
                                'complete' => $this->Js->get('#' . $ajaxtarget)->effect('fadeIn'),
                                    )
                    );
                }
            } else {
                $html .= $item[$model][$title];
            }
            if (count($item['children']) > 0) {
                $this->__settings['depth'] = $depth + 1;
                $html .= $this->__generate($item['children'], $this->__settings);
            }
            $html .= "</li>\n";
        }
        $html .= "</ul>\n";
        $html = str_replace("\n", "\n" . $whitespace, $html);
        return $html;
    }

}